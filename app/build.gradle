apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId "com.artion.androiddemos"
        minSdkVersion 14
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            moduleName "helloJni"         //生成的so名字
            ldLibs "log"//实现__android_log_print
            abiFilters "armeabi", "armeabi-v7a", "x86"  //输出指定三种abi体系结构下的so库。
            stl "stlport_static"    //打开.c 的 debug , 下面第 4 点会讲到
        }
    }
    splits {
        abi { //处理模拟器安装时报 INSTALL_FAILED_NO_MATCHING_ABIS
            enable true
            reset()
            include 'x86', 'armeabi-v7a'
            universalApk true
        }
    }

    sourceSets {
        main {
            jniLibs.srcDir 'src/main/libs'         //set .so files location to libs
            jni.srcDirs = []                       //disable automatic ndk-build call
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

dependencies {
    compile "com.android.support:appcompat-v7:${APPCOMPAT_VERSION}"
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
    compile "com.android.support:recyclerview-v7:${APPCOMPAT_VERSION}"
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.wang.avi:library:2.1.3'        //-keep class com.wang.avi.** { *; } -keep class com.wang.avi.indicators.** { *; }

    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}
